{"name":"PlayQi","tagline":"Play! 2 Qi4j Plugin","body":"# PlayQi - a Play! 2 Qi4j Plugin\r\n\r\nThis plugin ties a Qi4j Application to a Play! >=2.1 Application providing a tight\r\nintegration between the two.\r\n\r\n## What is Play!?\r\n\r\n![](http://www.playframework.org/assets/images/logo.png \"Play!\")\r\n\r\n> The Play framework makes it easier to build web applications with Java &\r\n> Scala.\r\n\r\n> Play is based on a lightweight, stateless, web-friendly architecture and\r\n> features predictable and minimal resource consumption (CPU, memory, threads)\r\n> for highly-scalable applications - thanks to its reactive model, based on\r\n> Iteratee IO.\r\n\r\nOfficial Site  \r\n[http://playframework.org/](http://playframework.org/)\r\n\r\nQuestions & Answers  \r\n[http://stackoverflow.com/questions/tagged/playframework-2.0]\r\n(http://stackoverflow.com/questions/tagged/playframework-2.0)\r\n\r\nDiscussion  \r\n[http://groups.google.com/group/play-framework]\r\n(http://groups.google.com/group/play-framework)\r\n\r\n\r\n## What is Qi4j?\r\n\r\n![](http://qi4j.org/graphics/Qi4j-Logo-64x64.png \"Qi4j\")\r\n\r\n> The short answer is that Qi4j is a framework for domain centric application\r\n> development, including evolved concepts from AOP, DI and DDD.\r\n\r\n> Qi4j is an implementation of Composite Oriented Programming, using the\r\n> standard Java 5 platform, without the use of any pre-processors or new\r\n> language elements. Everything you know from Java 5 still applies and you can\r\n> leverage both your experience and toolkits to become more productive with\r\n> Composite Oriented Programming today.\r\n\r\n> Moreover, Qi4j enables Composite Oriented Programming on the Java platform,\r\n> including both Java and Scala as primary languages as well as many of the\r\n> plethora of languages running on the JVM as bridged languages.\r\n\r\nOfficial Site  \r\n[http://qi4j.org/](http://qi4j.org/)\r\n\r\nQuestions & Answers  \r\n[http://stackoverflow.com/questions/tagged/qi4j]\r\n(http://stackoverflow.com/questions/tagged/qi4j)\r\n\r\nDiscussion  \r\n[http://groups.google.com/group/qi4j-dev](http://groups.google.com/group/qi4j-dev)\r\n\r\nAs Qi4j itself is written in the Java language, this Play plugin is too.\r\nSample code you'll find below is __Java__ code but most of this works in Play\r\n__Scala__ applications.\r\n\r\nYou can use Qi4j for a small part of your application where Composite Oriented\r\nProgramming fits or go for a bigger DDD stack using Qi4j\r\n[Libraries](http://qi4j.org/latest/libraries.html) and\r\n[Extensions](http://qi4j.org/latest/extensions.html). In development mode the Qi4j\r\n[Tools](http://qi4j.org/latest/tools.html) can come in handy.\r\n\r\n\r\n## How is \"PlayQi\" pronounced?\r\n\r\nQi4j is pronounced \"chee for jay\", so PlayQi is pronouced \"play chee\".\r\n\r\n\r\n## Usage\r\n\r\n### Installation\r\n\r\n* Add ````https://oss.sonatype.org/content/repositories/snapshots/```` and ````https://repository-qi4j.forge.cloudbees.com/snapshot/```` repositories as resolvers to your ````project/Build.scala```` ;\r\n* add ````\"org.codeartisans\" %% \"playqi\" % \"1.1\"```` and ````\"org.qi4j.core\" %% \"org.qi4j.core.runtime\" % \"2.0\"```` to your dependencies in ````project/Build.scala```` ;\r\n* add ````1500:org.codeartisans.playqi.PlayQiPlugin```` to your  ````conf/play.plugins````.\r\n\r\n\r\n### Application Assembly\r\n\r\nThe plugin request that you set the ````qi4j.app-assembler```` parameter in ````conf/application.conf````. \r\n\r\nA Qi4j application is assembled using an __ApplicationAssembler__, set ````qi4j.app-assembler```` to the fully qualified name of yours class.\r\n\r\nAs a quick start and for a simple Qi4j application you can extend SingletonAssembler ;\r\n\r\n    public class MyAppAssembler extends SingletonAssembler {\r\n      public void assemble(ModuleAssembly ma) throws AssemblyException {\r\n        ma.values( Comment.class, Tagline.class );\r\n        ma.entities( Post.class, Page.class );\r\n        ma.services( Blog.class\r\n                     MemoryEntityStoreService.class, \r\n                     UuidIdentityGeneratorService.class );\r\n      }\r\n    }\r\n\r\nand use ````qi4j.app-assembler=bootstrap.MyAppAssembler````.\r\n\r\nSee this tutorial on [how to assemble a more complete Qi4j application]\r\n(http://qi4j.org/latest/howto-assemble-application.html).\r\n\r\n\r\n## Integrations\r\n\r\n\r\n### Application Lifecycle and Modes\r\n\r\nPlay and Qi4j Applications are __started__ / __activated__ and __passivated__\r\n/ __stopped__ together.\r\n\r\nMoreover, Play __DEV__ / __TEST__ / __PROD__ modes and Qi4j __development__ / __test__ / __production__ modes are synched.\r\n\r\n\r\n### Plugin API\r\n\r\nDepending on your Qi4j Application assembly you can use two APIs:\r\n\r\n- ````PlayQiSingle```` for a simple Qi4j Application based on SingletonAssembler ;\r\n- ````PlayQi```` for a Qi4j Application using layers and modules.\r\n\r\n````PlayQiSingle```` is provided as an easy way to prototype or to integrate a small Qi4j application in a Play application. We recommend to use a true application assembly using layers and modules and the ````PlayQi```` API.\r\n\r\n**PlayQiSingle**\r\n\r\nWhen using a SingletonAssembler the single Module of the Qi4j Application is considered as the Module used by Play controllers, thus you don't need to set ````qi4j.controllers-layer```` nor ````qi4j.controllers-module```` in your configuration.\r\n\r\n    Application app = PlayQiSingle.application();\r\n    Layer layer = PlayQiSingle.layer();\r\n    Module module = PlayQiSingle.module();\r\n    Blog blog = PlayQiSingle.service( Blog.class );\r\n\r\nHere is a simple exemple:\r\n\r\n    public class BlogController extends Controller {\r\n      public static Result index() {\r\n        return ok( template.render( PlayQiSingle.service( Blog.class ).homepage() ) );\r\n      }\r\n    }\r\n\r\n**PlayQi**\r\n\r\nWhen using a complete Qi4j Application assembly you need to set ````qi4j.controllers-layer```` and ````qi4j.controllers-module```` in your configuration to point the Module of your Qi4j Application the Play controllers will use. Once done, ````PlayQi```` provide utility methods to quickly get handles on Qi4j composites:\r\n\r\n    Application app = PlayQi.application();\r\n    Layer controllersLayer = PlayQi.controllersLayer();\r\n    Module controllersModule = PlayQi.controllersModule();\r\n    Blog blog = PlayQi.service( Blog.class ); // From the controllers module\r\n\r\nBesides, you can also get a handle on any layer/modules of your Qi4j Application:\r\n\r\n    Layer layer = PlayQi.layer( \"Presentation\" );\r\n    Module module = PlayQi.module( \"Presentation\", \"Contexts\" );\r\n    Blog blog = PlayQi.service( \"Presentation\", \"Contexts\", Blog.class );\r\n\r\n\r\n### Controllers injection\r\n\r\nQi4j Structure and Service injections scopes are supported in controllers.\r\n\r\n> **WARNING** Controllers injection only work on Play! 2 **Java** Applications for now, we need help from Scala developers to implement this in **Scala**, any volunteers?\r\n\r\nTo use this facility you must set both ````qi4j.controllers-layer```` and ````qi4j.controllers-module````\r\nparameters in your ````application.conf```` to define the Module from where the injections\r\nwill be done ;\r\n\r\n    qi4j.controllers-layer=Presentation\r\n    qi4j.controllers-module=Contexts\r\n\r\nand then in your controllers:\r\n\r\n    @Structure public static Application application;\r\n    @Structure public static Layer layer;\r\n    @Structure public static Module module;\r\n\r\n    @Service public static Iterable<ServiceReference<Blog>> blogReferences;\r\n    @Service public static ServiceReference<Blog> blogReference;\r\n    @Service public static Blog blogService;\r\n\r\nBy default, only classes in the ````controllers```` package are injection candidates.\r\nYou can set the ````qi4j.controllers-packages```` parameter to change this behaviour with a\r\ncolumn separated list of package names.\r\n\r\n__Limitations__: @Tagged services are not supported yet.\r\n\r\n### Qi4j Controllers\r\n\r\nPlay 2.1 bring the possibility to use non-static Java controllers. This plugin allow\r\nyou to manage your controllers inside your Qi4j application.\r\n\r\nThis is available using ````PlayQiSingle```` and ````PlayQi````, see above.\r\n\r\n**Object Controllers**\r\n\r\nLet's start with a simple controller ;\r\n\r\n    public class MyController extends Controller {\r\n\r\n      @Service Blog blog;\r\n\r\n      public Result index() {\r\n        return ok( index.render( blog.homepage() ) );\r\n      }\r\n\r\n    }\r\n\r\nassemble it in your Qi4j application as an Object;\r\n\r\n    moduleAssembly.objects( MyController.class );\r\n\r\nand then use the PlayQi API in your GlobalSettings ;\r\n\r\n    public class Global extends GlobalSettings {\r\n\r\n      @Override\r\n      public <T> T getControllerInstance( Class<T> clazz ) {\r\n        return PlayQi.newControllerInstance( clazz );\r\n      }\r\n\r\n    }\r\n\r\n\r\n**Transient Composite Controllers**\r\n\r\nHere is a sample Controller as a TransientComposite (meaning you get Qi4j fragments support):\r\n\r\n    public interface MyController {\r\n\r\n      @MyConcern\r\n      @MySideEffect\r\n      Result index();\r\n\r\n    }\r\n    public class MyControllerMixin {\r\n\r\n      @Service Blog blog;\r\n\r\n      @Override\r\n      public Result index() {\r\n        return ok( index.render( blog.homepage() );\r\n      }\r\n    }\r\n\r\nassemble it in your Qi4j application as an Object;\r\n\r\n    moduleAssembly.transients( MyController.class ).withMixins( MyControllerMixin.class );\r\n\r\nand then use the PlayQi API in your GlobalSettings ;\r\n\r\n    public class Global extends GlobalSettings {\r\n\r\n      @Override\r\n      public <T> T getControllerInstance( Class<T> clazz ) {\r\n        return PlayQi.newTransientControllerInstance( clazz );\r\n      }\r\n\r\n    }\r\n\r\n### Compose Play Actions with Qi4j UnitOfWorks\r\n\r\nThis plugin provides the annotations and to wrap Qi4j UnitsOfWork around Play Actions and Callable<?> wrappers for you to go async.\r\n\r\nA Qi4j UnitOfWork takes place in a Module, so depending on your Application assembly you may use different Action composition annotations or Callable<?> wrappers.\r\n\r\n**When using SingletonAssembler**\r\n\r\n    import org.codeartisans.playqi.*;\r\n    public class MyController {\r\n\r\n      @PlayQiSingleUnitOfWorkConcern\r\n      public static Result action() {\r\n        :\r\n        return ok( .. );\r\n      }\r\n\r\n    }\r\n\r\nIf you go async, you can use the ````PlayQiSingleUnitOfWorkCallable```` to wrap a UoW around another Callable.\r\n\r\n**When using a full Qi4j Application assembly**\r\n\r\n    import org.codeartisans.playqi.*;\r\n    public class MyController {\r\n\r\n      // UoW taking place in the configured controllers module\r\n      @ControllersModuleUnitOfWorkConcern\r\n      public static Result action() {\r\n        :\r\n        return ok( .. );\r\n      }\r\n\r\n      // UoW taking place in a module of your choice\r\n      @PlayQiUnitOfWorkConcern( \"Presentation\", \"Contexts\" )\r\n      public static Result anotherAction() {\r\n        :\r\n        return ok( .. );\r\n      }\r\n    }\r\n\r\nIf you go async, you can use either the ````ControllersModuleUnitOfWorkCallable```` or the ````PlayQiUnitOfWorkCallable```` to wrap a UoW around another Callable.\r\n\r\n\r\n### Qi4j Development Tools\r\n\r\nTheses tools work in DEV mode only. Their configuration is ignored in TEST and PROD modes.\r\n\r\n#### Envisage\r\n\r\nBy setting ````qi4j.envisage=enabled```` in your ````application.conf````\r\nthe [Envisage Qi4j Tool](http://qi4j.org/latest/tools-envisage.html)\r\nis started/reloaded/stopped alongside your application.\r\n\r\n![](http://qi4j.org/latest/images/tools-envisage-type.png \"Type View\")\r\n\r\n![](http://qi4j.org/latest/images/tools-envisage-stacked.png \"Stacked View\")\r\n\r\nEnvisage is a Swing based visualization tool for the Qi4j Application model,\r\nit allows you to browse your Application Assembly. Visualizations can be printed to PDFs.\r\n\r\n\r\n#### EntityViewer\r\n\r\nBy setting ````qi4j.entity-viewer=enabled```` in your ````application.conf````\r\nthe [Entity Viewer Qi4j Tool](http://qi4j.org/latest/tools-entity-viewer.html)\r\nis started/reloaded/stopped alongside your application.\r\n\r\n![](http://qi4j.org/latest/images/tools-entity-viewer.png \"EntityViewer\")\r\n\r\nEntityViewer is a Swing based Entities browser. It allows you to browse Entities\r\npersisted in EntityStores.\r\n\r\nNote that to use the EntityViewer your Qi4j Application Assembly must contains both\r\nEntityStore and Index/Query services.\r\n\r\n\r\n## Licence\r\n\r\nThis software is licensed under the Apache 2 license, quoted below.\r\n\r\nCopyright 2012 Paul Merlin.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis project except in compliance with the License. You may obtain a copy of\r\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed\r\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\r\nspecific language governing permissions and limitations under the License.\r\n\r\n","google":"UA-36048640-1","note":"Don't delete this file! It's used internally to help with page regeneration."}